'use client';

import { useState, useEffect } from 'react';
import { useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { formatCurrency } from '../../getSponsorshipData';

// Razorpay test credentials
const RAZORPAY_KEY_ID = 'rzp_test_tuQ7OPOieO2QPl';

export default function PaymentPage() {
  const searchParams = useSearchParams();
  const [registrationData, setRegistrationData] = useState<any>(null);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<'stripe' | 'paypal' | null>(null);
  const [processing, setProcessing] = useState(false);
  const [error, setError] = useState('');

  const registrationId = searchParams.get('registrationId');
  const amount = searchParams.get('amount');

  useEffect(() => {
    // Load registration data from sessionStorage
    const storedData = sessionStorage.getItem('sponsorRegistration');
    if (storedData) {
      setRegistrationData(JSON.parse(storedData));
    }

    // Load Razorpay script
    const script = document.createElement('script');
    script.src = 'https://checkout.razorpay.com/v1/checkout.js';
    script.async = true;
    document.body.appendChild(script);

    return () => {
      document.body.removeChild(script);
    };
  }, []);

  const handlePayment = async (method: 'stripe' | 'paypal') => {
    if (!registrationData || !amount) {
      setError('Registration data not found. Please start over.');
      return;
    }

    setProcessing(true);
    setError('');

    try {
      // For testing, all payments go through Razorpay
      const options = {
        key: RAZORPAY_KEY_ID,
        amount: Math.round(Number(amount) * 100), // Convert to paise
        currency: 'USD',
        name: 'Intelli Global Conferences',
        description: `Sponsorship: ${registrationData.tierName}`,
        order_id: '', // This would be generated by your backend
        handler: function (response: any) {
          handlePaymentSuccess(response, method);
        },
        prefill: {
          name: `${registrationData.contactPerson.firstName} ${registrationData.contactPerson.lastName}`,
          email: registrationData.contactPerson.email,
          contact: registrationData.contactPerson.phone || '',
        },
        notes: {
          registration_id: registrationId,
          sponsorship_tier: registrationData.tierName,
          conference: registrationData.conference.title,
        },
        theme: {
          color: '#3B82F6',
        },
        modal: {
          ondismiss: function () {
            setProcessing(false);
          },
        },
      };

      const rzp = new (window as any).Razorpay(options);
      rzp.open();
    } catch (error) {
      console.error('Payment error:', error);
      setError('Payment initialization failed. Please try again.');
      setProcessing(false);
    }
  };

  const handlePaymentSuccess = async (response: any, method: 'stripe' | 'paypal') => {
    try {
      // Here you would normally send the payment details to your backend
      console.log('Payment successful:', response);
      console.log('Payment method used (UI):', method);
      console.log('Actual payment processed via: Razorpay');

      // Simulate API call to update registration and generate invoice
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Clear session storage
      sessionStorage.removeItem('sponsorRegistration');

      // Redirect to success page
      window.location.href = `/sponsorship/success?paymentId=${response.razorpay_payment_id}&registrationId=${registrationId}`;
    } catch (error) {
      console.error('Error processing payment success:', error);
      setError('Payment was successful but there was an error processing your registration. Please contact support.');
    }
  };

  if (!registrationData || !amount) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Payment Session Expired</h1>
          <p className="text-gray-600 mb-6">Your registration session has expired. Please start over.</p>
          <Link
            href="/sponsorship/register"
            className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Start New Registration
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Complete Your Payment
          </h1>
          <p className="text-lg text-gray-600">
            Secure payment processing for your sponsorship registration
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Order Summary */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Order Summary</h2>
            
            <div className="space-y-4">
              <div className="flex justify-between">
                <span className="text-gray-600">Conference:</span>
                <span className="font-medium">{registrationData.conference?.title}</span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-gray-600">Sponsorship Tier:</span>
                <span className="font-medium">{registrationData.tierName}</span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-gray-600">Company:</span>
                <span className="font-medium">{registrationData.companyDetails.companyName}</span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-gray-600">Contact:</span>
                <span className="font-medium">
                  {registrationData.contactPerson.firstName} {registrationData.contactPerson.lastName}
                </span>
              </div>
              
              <hr className="my-4" />
              
              <div className="flex justify-between text-xl font-bold">
                <span>Total Amount:</span>
                <span className="text-blue-600">{formatCurrency(Number(amount))}</span>
              </div>
            </div>

            <div className="mt-6 p-4 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>Registration ID:</strong> {registrationId}
              </p>
              <p className="text-sm text-blue-800 mt-1">
                Please save this ID for your records.
              </p>
            </div>
          </div>

          {/* Payment Methods */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Choose Payment Method</h2>
            
            {error && (
              <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-red-800">{error}</p>
              </div>
            )}

            <div className="space-y-4">
              {/* Stripe Option */}
              <div
                className={`border-2 rounded-lg p-6 cursor-pointer transition-all ${
                  selectedPaymentMethod === 'stripe'
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-300 hover:border-blue-300'
                }`}
                onClick={() => setSelectedPaymentMethod('stripe')}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <input
                      type="radio"
                      name="paymentMethod"
                      value="stripe"
                      checked={selectedPaymentMethod === 'stripe'}
                      onChange={() => setSelectedPaymentMethod('stripe')}
                      className="mr-4"
                    />
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">Credit/Debit Card</h3>
                      <p className="text-sm text-gray-600">Powered by Stripe</p>
                    </div>
                  </div>
                  <div className="flex space-x-2">
                    <img src="/api/placeholder/40/25" alt="Visa" className="h-6" />
                    <img src="/api/placeholder/40/25" alt="Mastercard" className="h-6" />
                    <img src="/api/placeholder/40/25" alt="Amex" className="h-6" />
                  </div>
                </div>
              </div>

              {/* PayPal Option */}
              <div
                className={`border-2 rounded-lg p-6 cursor-pointer transition-all ${
                  selectedPaymentMethod === 'paypal'
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-300 hover:border-blue-300'
                }`}
                onClick={() => setSelectedPaymentMethod('paypal')}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <input
                      type="radio"
                      name="paymentMethod"
                      value="paypal"
                      checked={selectedPaymentMethod === 'paypal'}
                      onChange={() => setSelectedPaymentMethod('paypal')}
                      className="mr-4"
                    />
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">PayPal</h3>
                      <p className="text-sm text-gray-600">Pay with your PayPal account</p>
                    </div>
                  </div>
                  <img src="/api/placeholder/80/25" alt="PayPal" className="h-6" />
                </div>
              </div>
            </div>

            {/* Payment Button */}
            <button
              onClick={() => selectedPaymentMethod && handlePayment(selectedPaymentMethod)}
              disabled={!selectedPaymentMethod || processing}
              className="w-full mt-8 bg-orange-500 text-white py-4 rounded-lg font-semibold text-lg hover:bg-orange-600 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {processing ? 'Processing...' : `Pay ${formatCurrency(Number(amount))}`}
            </button>

            <div className="mt-6 text-center">
              <p className="text-sm text-gray-600">
                🔒 Your payment is secured with 256-bit SSL encryption
              </p>
              <p className="text-xs text-gray-500 mt-2">
                For testing: All payments are processed through Razorpay test environment
              </p>
            </div>
          </div>
        </div>

        {/* Back Link */}
        <div className="text-center mt-8">
          <Link
            href="/sponsorship/register"
            className="text-blue-600 hover:text-blue-800 font-medium"
          >
            ← Back to Registration
          </Link>
        </div>
      </div>
    </div>
  );
}
